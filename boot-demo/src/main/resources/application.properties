# server 配置
server.port=8080
# server.address= # 绑定的地址
# server.session.timeout= #session有效时长
# server.context-path= #默认为/
# server.ssl.* #ssl相关配置
# debug=false
# logging.file=
# logging.path=

# Spring Boot的JdbcTemplate是自动配置的，你可以直接使用@Autowired来注入到你自己的bean中来使用
# 数据源配置 默认的
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/spring-boot
spring.datasource.username=root
spring.datasource.password=root

# Druid 连接池
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true

# Mybatis配置
mybatis.config-location=classpath:mybatis-config.xml


# 当你将应用部署于应用服务器上的时候想让数据源由应用服务器管理，那么可以使用如下配置方式引入JNDI数据源
# spring.datasource.jndi-name=java:jboss/datasources/customers

# JPA 配置
# create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
# create-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
# update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。
# validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
# spring.jpa.hibernate.ddl-auto=create-drop
# spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
# Specify the DBMS
# spring.jpa.database=MYSQL
# Show or not log for each sql query
# spring.jpa.show-sql=true

# Thymeleaf模板引擎参数配置
# Enable template caching.
# spring.thymeleaf.cache=true
# Check that the templates location exists.
# spring.thymeleaf.check-template-location=true
# Content-Type value.
# spring.thymeleaf.content-type=text/html
# Enable MVC Thymeleaf view resolution.
# spring.thymeleaf.enabled=true
# Template encoding.
# spring.thymeleaf.encoding=UTF-8
# Comma-separated list of view names that should be excluded from resolution.
# spring.thymeleaf.excluded-view-names=
# Template mode to be applied to templates. See also StandardTemplateModeHandlers.
# spring.thymeleaf.mode=HTML5
# Prefix that gets prepended to view names when building a URL.
# spring.thymeleaf.prefix=classpath:/templates/
# Suffix that gets appended to view names when building a URL.
# spring.thymeleaf.suffix=.html
# Order of the template resolver in the chain.
# spring.thymeleaf.template-resolver-order=
# Comma-separated list of view names that can be resolved.
# spring.thymeleaf.view-names=

# REDIS (RedisProperties)
# Redis数据库索引（默认为0）
# spring.redis.database=0
# Redis服务器地址
# spring.redis.host=localhost
# Redis服务器连接端口
# spring.redis.port=6379
# Redis服务器连接密码（默认为空）
# spring.redis.password=
# 连接池最大连接数（使用负值表示没有限制）
# spring.redis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
# spring.redis.pool.max-wait=-1
# 连接池中的最大空闲连接
# spring.redis.pool.max-idle=8
# 连接池中的最小空闲连接
# spring.redis.pool.min-idle=0
# 连接超时时间（毫秒）
# spring.redis.timeout=0